info:
  version: 0.0.1
  title: Euris FE Test API Docs
  description: >-
    API information required to complete the Euris frontend test, the base path
    is http://us-central1-test-b7665.cloudfunctions.net/api/ and remember that
    your store ID is ijpxNJLM732vm8AeajMR 
basePath: /api
swagger: '2.0'
paths:
  /stores:
    get:
      description: Returns all the stores
      produces:
        - application/json
      responses:
        '200':
          description: stores returned with success
          schema:
            type: array
            items:
              $ref: '#/definitions/Store'
  /stores/{idStore}:
    get:
      description: return a specific store
      parameters:
        - in: path
          name: idStore
          required: true
          type: string
          description: your store ID
      produces:
        - application/json
      responses:
        '200':
          description: single store returned with success
          schema:
            $ref: '#/definitions/Store'
  /stores/{idStore}/products:
    get:
      description: >-
        return multiple products, if you want you can add a pagination query
        with page and elements per page
      parameters:
        - in: path
          name: idStore
          required: true
          type: string
          description: your store ID
        - in: query
          name: page
          type: integer
          description: >-
            select the products that are in that page based on elements query
            parameter, start from 1
        - in: query
          name: elements
          type: integer
          description: number of products you want per page
      produces:
        - application/json
      responses:
        '200':
          description: products returned with success
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
    post:
      description: create a new product
      parameters:
        - in: path
          name: idStore
          required: true
          type: string
          description: your store ID
        - in: body
          name: newProduct
          required: true
          type: object
          description: the data you need for the new product you want to add
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: product created
  /stores/{idStore}/products/{idProduct}:
    get:
      description: return a specific product
      parameters:
        - in: path
          name: idStore
          required: true
          type: string
          description: your store ID
        - in: path
          name: idProduct
          required: true
          type: string
          description: your product ID
      produces:
        - application/json
      responses:
        '200':
          description: single product returned with success
          schema:
            $ref: '#/definitions/Product'
    delete:
      description: delete a specific product
      parameters:
        - in: path
          name: idStore
          required: true
          type: string
          description: your store ID
        - in: path
          name: idProduct
          required: true
          type: string
          description: your product ID
      produces:
        - application/json
      responses:
        '200':
          description: single product removed with success
  /stores/{idStore}/stats/categories:
    get:
      description: return the data for the products per category chart
      parameters:
        - in: path
          name: idStore
          required: true
          type: string
          description: your store ID
      produces:
        - application/json
      responses:
        '200':
          description: single store returned with success
          schema:
            type: array
            items:
              $ref: '#/definitions/StatsCategories'
definitions:
  Product:
    type: object
    required:
      - title
      - category
      - price
      - employee
    properties:
      title:
        type: string
      category:
        type: string
      price:
        type: number
      employee:
        type: string
      description:
        type: string
  Store:
    type: object
    required:
      - id
      - data
    properties:
      id:
        type: string
      data:
        type: object
        properties:
          name:
            type: string
          category:
            type: string
          employees:
            type: array
            items:
              type: string
  StatsCategories:
    type: object
    required:
      - numberOfProducts
      - category
    properties:
      numberOfProducts:
        type: number
      category:
        type: string
responses: {}
parameters: {}
securityDefinitions: {}
tags: []
