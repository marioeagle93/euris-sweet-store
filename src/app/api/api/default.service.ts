/**
 * Euris FE Test API Docs
 * API information required to complete the Euris frontend test, the base path is http://us-central1-test-b7665.cloudfunctions.net/api/ and remember that your store ID is ijpxNJLM732vm8AeajMR 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Product } from '../model/product';
import { StatsCategories } from '../model/statsCategories';
import { Store } from '../model/store';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class DefaultService {

    protected basePath = '';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Returns all the stores
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Store>>;
    public storesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Store>>>;
    public storesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Store>>>;
    public storesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Store>>('get',`${this.basePath}/stores`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * return a specific store
     * @param idStore your store ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storesIdStoreGet(idStore: string, observe?: 'body', reportProgress?: boolean): Observable<Store>;
    public storesIdStoreGet(idStore: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Store>>;
    public storesIdStoreGet(idStore: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Store>>;
    public storesIdStoreGet(idStore: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStore === null || idStore === undefined) {
            throw new Error('Required parameter idStore was null or undefined when calling storesIdStoreGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Store>('get',`${this.basePath}/stores/${encodeURIComponent(String(idStore))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * return multiple products, if you want you can add a pagination query with page and elements per page
     * @param idStore your store ID
     * @param page select the products that are in that page based on elements query parameter, start from 1
     * @param elements number of products you want per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storesIdStoreProductsGet(idStore: string, page?: number, elements?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Product>>;
    public storesIdStoreProductsGet(idStore: string, page?: number, elements?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Product>>>;
    public storesIdStoreProductsGet(idStore: string, page?: number, elements?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Product>>>;
    public storesIdStoreProductsGet(idStore: string, page?: number, elements?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStore === null || idStore === undefined) {
            throw new Error('Required parameter idStore was null or undefined when calling storesIdStoreProductsGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (elements !== undefined && elements !== null) {
            queryParameters = queryParameters.set('elements', <any>elements);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Product>>('get',`${this.basePath}/stores/${encodeURIComponent(String(idStore))}/products`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * delete a specific product
     * @param idStore your store ID
     * @param idProduct your product ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storesIdStoreProductsIdProductDelete(idStore: string, idProduct: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public storesIdStoreProductsIdProductDelete(idStore: string, idProduct: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public storesIdStoreProductsIdProductDelete(idStore: string, idProduct: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public storesIdStoreProductsIdProductDelete(idStore: string, idProduct: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStore === null || idStore === undefined) {
            throw new Error('Required parameter idStore was null or undefined when calling storesIdStoreProductsIdProductDelete.');
        }

        if (idProduct === null || idProduct === undefined) {
            throw new Error('Required parameter idProduct was null or undefined when calling storesIdStoreProductsIdProductDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/stores/${encodeURIComponent(String(idStore))}/products/${encodeURIComponent(String(idProduct))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * return a specific product
     * @param idStore your store ID
     * @param idProduct your product ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storesIdStoreProductsIdProductGet(idStore: string, idProduct: string, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public storesIdStoreProductsIdProductGet(idStore: string, idProduct: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public storesIdStoreProductsIdProductGet(idStore: string, idProduct: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public storesIdStoreProductsIdProductGet(idStore: string, idProduct: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStore === null || idStore === undefined) {
            throw new Error('Required parameter idStore was null or undefined when calling storesIdStoreProductsIdProductGet.');
        }

        if (idProduct === null || idProduct === undefined) {
            throw new Error('Required parameter idProduct was null or undefined when calling storesIdStoreProductsIdProductGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Product>('get',`${this.basePath}/stores/${encodeURIComponent(String(idStore))}/products/${encodeURIComponent(String(idProduct))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * create a new product
     * @param body the data you need for the new product you want to add
     * @param idStore your store ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storesIdStoreProductsPost(body: Product, idStore: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public storesIdStoreProductsPost(body: Product, idStore: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public storesIdStoreProductsPost(body: Product, idStore: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public storesIdStoreProductsPost(body: Product, idStore: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling storesIdStoreProductsPost.');
        }

        if (idStore === null || idStore === undefined) {
            throw new Error('Required parameter idStore was null or undefined when calling storesIdStoreProductsPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/stores/${encodeURIComponent(String(idStore))}/products`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * return the data for the products per category chart
     * @param idStore your store ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storesIdStoreStatsCategoriesGet(idStore: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StatsCategories>>;
    public storesIdStoreStatsCategoriesGet(idStore: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatsCategories>>>;
    public storesIdStoreStatsCategoriesGet(idStore: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatsCategories>>>;
    public storesIdStoreStatsCategoriesGet(idStore: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStore === null || idStore === undefined) {
            throw new Error('Required parameter idStore was null or undefined when calling storesIdStoreStatsCategoriesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StatsCategories>>('get',`${this.basePath}/stores/${encodeURIComponent(String(idStore))}/stats/categories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
